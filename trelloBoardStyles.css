body {
	background-color: beige;
}

.jumbotron {
	background-color: beige;
	font-family: sans-serif;
}

#swimlanes{
	display: flex;
	flex-wrap: nowrap;
	overflow: scroll;
}
.swimlane {
	background-color: lightgrey;
	width: 335px;
	height: 600px;
	margin-right: 10px;
	margin-left: 20px;
	margin-top: 10px;
	border-radius: 5px;
	border: 1px solid black;
}

.icon{
	margin-left: 15px;
}

.swimlane .header {
	padding-left: 15px;
	font-family: sans-serif;
	font-size: 18px;
	font-weight: bold;
	color: blue;
}
.card{
	min-height:100px; 
	margin: 10px;
	background-color: lightblue;
	border: 1px solid lightgrey;
	border-radius: 5px;
}
.card .header{
	padding-left: 15px;
	font-family: sans-serif;
	font-size: 14px;
	font-weight: bold;
	color: red;
}

.icons{
	display: flex;
	justify-content: space-around;
}
.card-white{
	background-color: white;
}
.card-lightBlue{
	background-color: lightblue;
}

/*	- ability to add a swim lane
		 create a new element --document.createElement("div")

	- ability to add a card to a swim lane
		create a new element --document.createElement("div")

	- move the swim lane to the left or right (next to another swim lane)
		create variable to find/reference id
		create variable to save result of looking for parent using parentNode

	- add a name to the swim lane
		when creating a card be able to enter a name meaning having an input box available....


	- edit the name of a swim lane
	- delete a swim lane
		- Do we delete all the cards in a swim lane/
		- Do we prompt "Are you sure you want to delete all these cards?"
		- Do we prompt to move all the cards to an existing swim lane?	
	Cards should have buttons for doing the following:
		- When adding a card to a swim lane, you should be able to add a name and description to the card
		- ability to edit the name and card for a swimlane
		- ability to delete a card from a swim lane
		- ability to move a card to the next or previous swim lane
		- ability to move a card up or down in a swim lane
	
	to delete:
	function handleDeleteClicked(container, child){
		//alert('delete has been clicked')
	container.removeChild(child);
	}
	

	example:
	function(){
	var newDiv= document.createElement('div');
	newDiv.setAttribute('class', 'card');
	newDiv.appendChild(create button (delete, function(){})

	parent.removeChild(newDiv);
	}

	function handleEditClicked(){
	alert(edit)
	} do this for all buttons edit, delete, up, down, right, left


	function createButton(text, clickHandler){
	var button= document.getElementById('button');
	button.appendchild.createTextNode('text');
	button.addEventListener("click", function(){

		
	
	
	return button;
	})
	*/

